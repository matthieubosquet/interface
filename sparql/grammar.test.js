const grammar = require('./grammar');

const testData = {
    // DataBlockValue ::= iri | RDFLiteral | NumericLiteral | BooleanLiteral | 'UNDEF'
    DataBlockValue: [
        { value: 'UNDEF', expect: true },
        { value: 'undef', expect: false },
        { value: '<:>', expect: true },
        { value: '<a>', expect: true },
        { value: '<{>', expect: false },
        { value: '<abl s>', expect: false },
        { value: '<https://blabla.com>', expect: true },
        { value: ':_', expect: true },
        { value: '::', expect: true },
        { value: ':_.', expect: false },
        { value: '::', expect: true },
        { value: ':0', expect: true },
        { value: ':0.:', expect: true },
        { value: ':x.%00', expect: true },
        { value: ':', expect: true },
        { value: '0:', expect: false },
        { value: '-:', expect: false },
        { value: 'a:', expect: true },
        { value: 'abcs:', expect: true },
        { value: 'a.:', expect: false },
        { value: 'a.a:', expect: true },
        { value: 'x....a:', expect: true },
        { value: 'x....a0-:', expect: true },
        { value: 'x9:', expect: true },
        { value: "'''abc \n \\''''@ab-cd", expect: true },
        { value: "'abc'@a", expect: true },
        { value: '" "^^<https://blabla.com>', expect: true },
        { value: '" "^^<x>', expect: true },
        { value: '" "^^a:b', expect: true },
        { value: 'a', expect: false },
        { value: "'''", expect: false },
        { value: '"""', expect: false },
        { value: "'''''", expect: false },
        { value: '""""', expect: false },
        { value: '"""""', expect: false },
        { value: "' \' '", expect: false },
        { value: "' \\n '", expect: true },
        { value: "' '", expect: true },
        { value: "'abc \x0Dz'", expect: false },
        { value: "'abc \nz'", expect: false },
        { value: "'abc \rz'", expect: false },
        { value: "'abc \x0Az'", expect: false },
        { value: "'abc \\z'", expect: false },
        { value: "' \\t \\b \\n \\r \\f \\\\ \\\" \\' '", expect: true },
        { value: '" \" "', expect: false },
        { value: '" \\n "', expect: true },
        { value: '" "', expect: true },
        { value: '"abc \x0Dz"', expect: false },
        { value: '"abc \nz"', expect: false },
        { value: '"abc \rz"', expect: false },
        { value: '"abc \x0Az"', expect: false },
        { value: '"abc \\z"', expect: false },
        { value: '" \\t \\b \\n \\r \\f \\\\ \\" \\\'  "', expect: true },
        { value: "'''''''", expect: false },
        { value: "''''''", expect: true },
        { value: "''' '''", expect: true },
        { value: "'''' '''", expect: true },
        { value: "'''abc \n \\''''", expect: true },
        { value: "'''abc \\ '''", expect: false },
        { value: "'''abc \\n \"def'''", expect: true },
        { value: '""""""', expect: true },
        { value: '""" """', expect: true },
        { value: '"""""""', expect: false },
        { value: '""""" """', expect: true },
        { value: '"""abc \n \\""""', expect: true },
        { value: '"""abc \\ """', expect: false },
        { value: '"""abc \\n \"def"""', expect: true },
        { value: '1', expect: true },
        { value: '2', expect: true },
        { value: '3456789', expect: true },
        { value: '003456789', expect: true },
        { value: '003456789+', expect: false },
        { value: '.1', expect: true },
        { value: '.13987', expect: true },
        { value: '0.13987', expect: true },
        { value: '0.', expect: false },
        { value: '23837.13987', expect: true },
        { value: '0e0', expect: true },
        { value: '9e+1', expect: true },
        { value: '902878e-1', expect: true },
        { value: '837.938e+012', expect: true },
        { value: '.9374e123', expect: true },
        { value: '00123.09377E+1', expect: true },
        { value: '00123.0937.7E+1', expect: false },
        { value: '23a+1', expect: false },
        { value: '3é+1', expect: false },
        { value: '+1', expect: true },
        { value: '+2', expect: true },
        { value: '+3456789', expect: true },
        { value: '+003456789', expect: true },
        { value: '-003456789', expect: true },
        { value: '003456789', expect: true },
        { value: '+.1', expect: true },
        { value: '+.13987', expect: true },
        { value: '+0.13987', expect: true },
        { value: '+0.', expect: false },
        { value: '0.1', expect: true },
        { value: '-0.1', expect: true },
        { value: '+23837.13987', expect: true },
        { value: '+0e0', expect: true },
        { value: '+9e+1', expect: true },
        { value: '+902878e-1', expect: true },
        { value: '+837.938e+012', expect: true },
        { value: '+.9374e123', expect: true },
        { value: '+00123.09377E+1', expect: true },
        { value: '+00123', expect: true },
        { value: '+00123.0937.7E+1', expect: false },
        { value: '+23a+1', expect: false },
        { value: '+3é+1', expect: false },
        { value: '-1', expect: true },
        { value: '-2', expect: true },
        { value: '-3456789', expect: true },
        { value: '-.1', expect: true },
        { value: '-.13987', expect: true },
        { value: '-0.13987', expect: true },
        { value: '-0.', expect: false },
        { value: '0.1', expect: true },
        { value: '+0.1', expect: true },
        { value: '-23837.13987', expect: true },
        { value: '-0e0', expect: true },
        { value: '-9e+1', expect: true },
        { value: '-902878e-1', expect: true },
        { value: '-837.938e+012', expect: true },
        { value: '-.9374e123', expect: true },
        { value: '-00123.09377E+1', expect: true },
        { value: '-00123', expect: true },
        { value: '-00123.0937.7E+1', expect: false },
        { value: '-23a+1', expect: false },
        { value: '-3é+1', expect: false },
        { value: 'true', expect: true },
        { value: 'false', expect: true },
        { value: 'tru', expect: false },
        { value: 'fals', expect: false },
        { value: 'fals e', expect: false }
    ],
    // RDFLiteral ::= String ( LANGTAG | ( '^^' iri ) )?
    RDFLiteral: [
        { value: "'''abc \n \\''''@ab-cd", expect: true },
        { value: "'abc'@a", expect: true },
        { value: '" "^^<https://blabla.com>', expect: true },
        { value: '" "^^<x>', expect: true },
        { value: '" "^^a:b', expect: true },
        { value: 'a', expect: false },
        { value: "'''", expect: false },
        { value: '"""', expect: false },
        { value: "'''''", expect: false },
        { value: '""""', expect: false },
        { value: '"""""', expect: false },
        { value: "' \' '", expect: false },
        { value: "' \\n '", expect: true },
        { value: "' '", expect: true },
        { value: "'abc \x0Dz'", expect: false },
        { value: "'abc \nz'", expect: false },
        { value: "'abc \rz'", expect: false },
        { value: "'abc \x0Az'", expect: false },
        { value: "'abc \\z'", expect: false },
        { value: "' \\t \\b \\n \\r \\f \\\\ \\\" \\' '", expect: true },
        { value: '" \" "', expect: false },
        { value: '" \\n "', expect: true },
        { value: '" "', expect: true },
        { value: '"abc \x0Dz"', expect: false },
        { value: '"abc \nz"', expect: false },
        { value: '"abc \rz"', expect: false },
        { value: '"abc \x0Az"', expect: false },
        { value: '"abc \\z"', expect: false },
        { value: '" \\t \\b \\n \\r \\f \\\\ \\" \\\'  "', expect: true },
        { value: "'''''''", expect: false },
        { value: "''''''", expect: true },
        { value: "''' '''", expect: true },
        { value: "'''' '''", expect: true },
        { value: "'''abc \n \\''''", expect: true },
        { value: "'''abc \\ '''", expect: false },
        { value: "'''abc \\n \"def'''", expect: true },
        { value: '""""""', expect: true },
        { value: '""" """', expect: true },
        { value: '"""""""', expect: false },
        { value: '""""" """', expect: true },
        { value: '"""abc \n \\""""', expect: true },
        { value: '"""abc \\ """', expect: false },
        { value: '"""abc \\n \"def"""', expect: true }
    ],
    // NumericLiteral ::= NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
    NumericLiteral: [
        { value: '1', expect: true },
        { value: '2', expect: true },
        { value: '3456789', expect: true },
        { value: '003456789', expect: true },
        { value: '003456789+', expect: false },
        { value: '.1', expect: true },
        { value: '.13987', expect: true },
        { value: '0.13987', expect: true },
        { value: '0.', expect: false },
        { value: '23837.13987', expect: true },
        { value: '0e0', expect: true },
        { value: '9e+1', expect: true },
        { value: '902878e-1', expect: true },
        { value: '837.938e+012', expect: true },
        { value: '.9374e123', expect: true },
        { value: '00123.09377E+1', expect: true },
        { value: '00123.0937.7E+1', expect: false },
        { value: '23a+1', expect: false },
        { value: '3é+1', expect: false },
        { value: '+1', expect: true },
        { value: '+2', expect: true },
        { value: '+3456789', expect: true },
        { value: '+003456789', expect: true },
        { value: '-003456789', expect: true },
        { value: '003456789', expect: true },
        { value: '+.1', expect: true },
        { value: '+.13987', expect: true },
        { value: '+0.13987', expect: true },
        { value: '+0.', expect: false },
        { value: '0.1', expect: true },
        { value: '-0.1', expect: true },
        { value: '+23837.13987', expect: true },
        { value: '+0e0', expect: true },
        { value: '+9e+1', expect: true },
        { value: '+902878e-1', expect: true },
        { value: '+837.938e+012', expect: true },
        { value: '+.9374e123', expect: true },
        { value: '+00123.09377E+1', expect: true },
        { value: '+00123', expect: true },
        { value: '+00123.0937.7E+1', expect: false },
        { value: '+23a+1', expect: false },
        { value: '+3é+1', expect: false },
        { value: '-1', expect: true },
        { value: '-2', expect: true },
        { value: '-3456789', expect: true },
        { value: '-.1', expect: true },
        { value: '-.13987', expect: true },
        { value: '-0.13987', expect: true },
        { value: '-0.', expect: false },
        { value: '0.1', expect: true },
        { value: '+0.1', expect: true },
        { value: '-23837.13987', expect: true },
        { value: '-0e0', expect: true },
        { value: '-9e+1', expect: true },
        { value: '-902878e-1', expect: true },
        { value: '-837.938e+012', expect: true },
        { value: '-.9374e123', expect: true },
        { value: '-00123.09377E+1', expect: true },
        { value: '-00123', expect: true },
        { value: '-00123.0937.7E+1', expect: false },
        { value: '-23a+1', expect: false },
        { value: '-3é+1', expect: false }
    ],
    // NumericLiteralUnsigned ::= INTEGER | DECIMAL | DOUBLE
    NumericLiteralUnsigned: [
        { value: '1', expect: true },
        { value: '2', expect: true },
        { value: '3456789', expect: true },
        { value: '003456789', expect: true },
        { value: '-003456789', expect: false },
        { value: '003456789+', expect: false },
        { value: '.1', expect: true },
        { value: '.13987', expect: true },
        { value: '0.13987', expect: true },
        { value: '0.', expect: false },
        { value: '23837.13987', expect: true },
        { value: '0e0', expect: true },
        { value: '9e+1', expect: true },
        { value: '902878e-1', expect: true },
        { value: '837.938e+012', expect: true },
        { value: '.9374e123', expect: true },
        { value: '00123.09377E+1', expect: true },
        { value: '00123.0937.7E+1', expect: false },
        { value: '23a+1', expect: false },
        { value: '3é+1', expect: false }
    ],
    // NumericLiteralPositive ::= INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
    NumericLiteralPositive: [
        { value: '+1', expect: true },
        { value: '+2', expect: true },
        { value: '+3456789', expect: true },
        { value: '+003456789', expect: true },
        { value: '-003456789', expect: false },
        { value: '003456789', expect: false },
        { value: '+.1', expect: true },
        { value: '+.13987', expect: true },
        { value: '+0.13987', expect: true },
        { value: '+0.', expect: false },
        { value: '0.1', expect: false },
        { value: '-0.1', expect: false },
        { value: '+23837.13987', expect: true },
        { value: '+0e0', expect: true },
        { value: '+9e+1', expect: true },
        { value: '+902878e-1', expect: true },
        { value: '+837.938e+012', expect: true },
        { value: '+.9374e123', expect: true },
        { value: '+00123.09377E+1', expect: true },
        { value: '-00123.09377E+1', expect: false },
        { value: '+00123', expect: true },
        { value: '+00123.0937.7E+1', expect: false },
        { value: '+23a+1', expect: false },
        { value: '+3é+1', expect: false }
    ],
    // NumericLiteralNegative ::= INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
    NumericLiteralNegative: [
        { value: '-1', expect: true },
        { value: '-2', expect: true },
        { value: '-3456789', expect: true },
        { value: '-003456789', expect: true },
        { value: '+003456789', expect: false },
        { value: '003456789', expect: false },
        { value: '-.1', expect: true },
        { value: '-.13987', expect: true },
        { value: '-0.13987', expect: true },
        { value: '-0.', expect: false },
        { value: '0.1', expect: false },
        { value: '+0.1', expect: false },
        { value: '-23837.13987', expect: true },
        { value: '-0e0', expect: true },
        { value: '-9e+1', expect: true },
        { value: '-902878e-1', expect: true },
        { value: '-837.938e+012', expect: true },
        { value: '-.9374e123', expect: true },
        { value: '-00123.09377E+1', expect: true },
        { value: '+00123.09377E+1', expect: false },
        { value: '-00123', expect: true },
        { value: '-00123.0937.7E+1', expect: false },
        { value: '-23a+1', expect: false },
        { value: '-3é+1', expect: false }
    ],
    // BooleanLiteral ::= 'true' | 'false'
    BooleanLiteral: [
        { value: 'true', expect: true },
        { value: 'false', expect: true },
        { value: 'tru', expect: false },
        { value: 'fals', expect: false },
        { value: 'fals e', expect: false },
        { value: '0', expect: false }
    ],
    // String ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
    String: [
        { value: 'a', expect: false },
        { value: "'''", expect: false },
        { value: '"""', expect: false },
        { value: "'''''", expect: false },
        { value: '""""', expect: false },
        { value: '"""""', expect: false },
        { value: "' \' '", expect: false },
        { value: "' \\n '", expect: true },
        { value: "' '", expect: true },
        { value: "'abc \x0Dz'", expect: false },
        { value: "'abc \nz'", expect: false },
        { value: "'abc \rz'", expect: false },
        { value: "'abc \x0Az'", expect: false },
        { value: "'abc \\z'", expect: false },
        { value: "' \\t \\b \\n \\r \\f \\\\ \\\" \\' '", expect: true },
        { value: '" \" "', expect: false },
        { value: '" \\n "', expect: true },
        { value: '" "', expect: true },
        { value: '"abc \x0Dz"', expect: false },
        { value: '"abc \nz"', expect: false },
        { value: '"abc \rz"', expect: false },
        { value: '"abc \x0Az"', expect: false },
        { value: '"abc \\z"', expect: false },
        { value: '" \\t \\b \\n \\r \\f \\\\ \\" \\\'  "', expect: true },
        { value: "'''''''", expect: false },
        { value: "''''''", expect: true },
        { value: "''' '''", expect: true },
        { value: "'''' '''", expect: true },
        { value: "'''abc \n \\''''", expect: true },
        { value: "'''abc \\ '''", expect: false },
        { value: "'''abc \\n \"def'''", expect: true },
        { value: '""""""', expect: true },
        { value: '""" """', expect: true },
        { value: '"""""""', expect: false },
        { value: '""""" """', expect: true },
        { value: '"""abc \n \\""""', expect: true },
        { value: '"""abc \\ """', expect: false },
        { value: '"""abc \\n \"def"""', expect: true }
    ],
    // iri ::= IRIREF | PrefixedName
    iri: [
        { value: '<:>', expect: true },
        { value: '<a>', expect: true },
        { value: '<{>', expect: false },
        { value: '<abl s>', expect: false },
        { value: '<https://blabla.com>', expect: true },
        { value: ':_', expect: true },
        { value: '::', expect: true },
        { value: ':_.', expect: false },
        { value: '::', expect: true },
        { value: ':0', expect: true },
        { value: ':0.:', expect: true },
        { value: ':x.%00', expect: true },
        { value: ':', expect: true },
        { value: '0:', expect: false },
        { value: '-:', expect: false },
        { value: 'a:', expect: true },
        { value: 'abcs:', expect: true },
        { value: 'a.:', expect: false },
        { value: 'a.a:', expect: true },
        { value: 'x....a:', expect: true },
        { value: 'x....a0-:', expect: true },
        { value: 'x9:', expect: true }
    ],
    // PrefixedName ::= PNAME_LN | PNAME_NS 
    PrefixedName: [
        { value: ':_', expect: true },
        { value: '::', expect: true },
        { value: ':_.', expect: false },
        { value: '::', expect: true },
        { value: ':0', expect: true },
        { value: ':0.:', expect: true },
        { value: ':x.%00', expect: true },
        { value: ':', expect: true },
        { value: '0:', expect: false },
        { value: '-:', expect: false },
        { value: 'a:', expect: true },
        { value: 'abcs:', expect: true },
        { value: 'a.:', expect: false },
        { value: 'a.a:', expect: true },
        { value: 'x....a:', expect: true },
        { value: 'x....a0-:', expect: true },
        { value: 'x9:', expect: true }
    ],
    // BlankNode ::= BLANK_NODE_LABEL | ANON
    BlankNode: [
        { value: '_:', expect: false },
        { value: '_:a', expect: true },
        { value: '_:.a', expect: false },
        { value: '_:a.', expect: false },
        { value: '_:a.a', expect: true },
        { value: '_:0', expect: true },
        { value: '[_]', expect: false },
        { value: '[ ]', expect: true },
        { value: '[\t]', expect: true },
        { value: '[\r\t ]', expect: true },
        { value: '[   \n]', expect: true },
        { value: '[   a]', expect: false },
        { value: 'x', expect: false }
    ],
    // IRIREF ::= '<' ([^<>"{}|^`\]-[#x00-#x20])* '>'
    IRIREF: [
        { value: '<:>', expect: true },
        { value: '<a>', expect: true },
        { value: '<{>', expect: false },
        { value: '<abl s>', expect: false },
        { value: '<https://blabla.com>', expect: true }
    ],
    // PNAME_NS ::= PN_PREFIX? ':'
    PNAME_NS: [
        { value: ':', expect: true },
        { value: '0:', expect: false },
        { value: '-:', expect: false },
        { value: 'a:', expect: true },
        { value: 'abcs:', expect: true },
        { value: 'a.:', expect: false },
        { value: 'a.a:', expect: true },
        { value: 'x....a:', expect: true },
        { value: 'x....a0-:', expect: true },
        { value: 'x9:', expect: true }
    ],
    // PNAME_LN ::= PNAME_NS PN_LOCAL
    PNAME_LN: [
        { value: ':_', expect: true },
        { value: '::', expect: true },
        { value: ':_.', expect: false },
        { value: '::', expect: true },
        { value: ':0', expect: true },
        { value: ':0.:', expect: true },
        { value: ':x.%00', expect: true }
    ],
    // BLANK_NODE_LABEL ::= '_:' ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?
    BLANK_NODE_LABEL: [
        { value: '_:', expect: false },
        { value: '_:a', expect: true },
        { value: '_:.a', expect: false },
        { value: '_:a.', expect: false },
        { value: '_:a.a', expect: true },
        { value: '_:0', expect: true }
    ],
    // VAR1 ::= '?' VARNAME
    VAR1: [
        { value: '?0', expect: true },
        { value: '$0', expect: false },
        { value: '?A\u00B7a', expect: true },
        { value: '?\u00B7ii', expect: false },
        { value: '?_x\u0301', expect: true }
    ],
    // VAR2 ::= '$' VARNAME
    VAR2: [
        { value: '$0', expect: true },
        { value: '$x', expect: true },
        { value: '?x', expect: false },
        { value: '$A\u00B7a', expect: true },
        { value: '$\u00B7ii', expect: false },
        { value: '$_x\u0301', expect: true }
    ],
    // LANGTAG ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
    LANGTAG: [
        { value: '@a', expect: true },
        { value: '@ab', expect: true },
        { value: '@A', expect: true },
        { value: '@AB-', expect: false },
        { value: '@AB-a', expect: true },
        { value: '@AB-09', expect: true },
        { value: '@AB-ab-z-09', expect: true },
    ],
    // INTEGER ::= [0-9]+
    INTEGER: [
        { value: '1', expect: true },
        { value: '2', expect: true },
        { value: '3456789', expect: true },
        { value: '003456789', expect: true },
        { value: '-003456789', expect: false },
        { value: '003456789+', expect: false }
    ],
    // DECIMAL ::= [0-9]* '.' [0-9]+
    DECIMAL: [
        { value: '.1', expect: true },
        { value: '.13987', expect: true },
        { value: '0.13987', expect: true },
        { value: '0.', expect: false },
        { value: '23837.13987', expect: true }
    ],
    // DOUBLE ::= [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT
    DOUBLE: [
        { value: '0e0', expect: true },
        { value: '9e+1', expect: true },
        { value: '902878e-1', expect: true },
        { value: '837.938e+012', expect: true },
        { value: '.9374e123', expect: true },
        { value: '00123.09377E+1', expect: true },
        { value: '00123.0937.7E+1', expect: false },
        { value: '23a+1', expect: false },
        { value: '3é+1', expect: false }
    ],
    // INTEGER_POSITIVE ::= '+' INTEGER
    INTEGER_POSITIVE: [
        { value: '+1', expect: true },
        { value: '+2', expect: true },
        { value: '+3456789', expect: true },
        { value: '+003456789', expect: true },
        { value: '-003456789', expect: false },
        { value: '003456789', expect: false }
    ],
    // DECIMAL_POSITIVE ::= '+' DECIMAL
    DECIMAL_POSITIVE: [
        { value: '+.1', expect: true },
        { value: '+.13987', expect: true },
        { value: '+0.13987', expect: true },
        { value: '+0.', expect: false },
        { value: '0.1', expect: false },
        { value: '-0.1', expect: false },
        { value: '+23837.13987', expect: true }
    ],
    // DOUBLE_POSITIVE ::= '+' DOUBLE
    DOUBLE_POSITIVE: [
        { value: '+0e0', expect: true },
        { value: '+9e+1', expect: true },
        { value: '+902878e-1', expect: true },
        { value: '+837.938e+012', expect: true },
        { value: '+.9374e123', expect: true },
        { value: '+00123.09377E+1', expect: true },
        { value: '-00123.09377E+1', expect: false },
        { value: '+00123', expect: false },
        { value: '+00123.0937.7E+1', expect: false },
        { value: '+23a+1', expect: false },
        { value: '+3é+1', expect: false }
    ],
    // INTEGER_NEGATIVE ::= '-' INTEGER
    INTEGER_NEGATIVE: [
        { value: '-1', expect: true },
        { value: '-2', expect: true },
        { value: '-3456789', expect: true },
        { value: '-003456789', expect: true },
        { value: '+003456789', expect: false },
        { value: '003456789', expect: false }
    ],
    // DECIMAL_NEGATIVE ::= '-' DECIMAL
    DECIMAL_NEGATIVE: [
        { value: '-.1', expect: true },
        { value: '-.13987', expect: true },
        { value: '-0.13987', expect: true },
        { value: '-0.', expect: false },
        { value: '0.1', expect: false },
        { value: '+0.1', expect: false },
        { value: '-23837.13987', expect: true }
    ],
    // DOUBLE_NEGATIVE ::= '-' DOUBLE
    DOUBLE_NEGATIVE: [
        { value: '-0e0', expect: true },
        { value: '-9e+1', expect: true },
        { value: '-902878e-1', expect: true },
        { value: '-837.938e+012', expect: true },
        { value: '-.9374e123', expect: true },
        { value: '-00123.09377E+1', expect: true },
        { value: '+00123.09377E+1', expect: false },
        { value: '-00123', expect: false },
        { value: '-00123.0937.7E+1', expect: false },
        { value: '-23a+1', expect: false },
        { value: '-3é+1', expect: false }
    ],
    // EXPONENT ::= [eE] [+-]? [0-9]+
    EXPONENT: [
        { value: 'e0', expect: true },
        { value: 'e+1', expect: true },
        { value: 'e-1', expect: true },
        { value: 'e+012', expect: true },
        { value: 'e123', expect: true },
        { value: 'E+1', expect: true },
        { value: 'a+1', expect: false },
        { value: 'é+1', expect: false }
    ],
    // STRING_LITERAL1 ::= "'" ( ([^#x27#x5C#xA#xD]) | ECHAR )* "'"
    STRING_LITERAL1: [
        { value: 'a', expect: false },
        { value: "'''", expect: false },
        { value: "' \' '", expect: false },
        { value: "' \\n '", expect: true },
        { value: "' '", expect: true },
        { value: "'abc \x0Dz'", expect: false },
        { value: "'abc \nz'", expect: false },
        { value: "'abc \rz'", expect: false },
        { value: "'abc \x0Az'", expect: false },
        { value: "'abc \\z'", expect: false },
        { value: "' \\t \\b \\n \\r \\f \\\\ \\\" \\' '", expect: true }
    ],
    // STRING_LITERAL2 ::= '"' ( ([^#x22#x5C#xA#xD]) | ECHAR )* '"'
    STRING_LITERAL2: [
        { value: 'a', expect: false },
        { value: '"""', expect: false },
        { value: '" \" "', expect: false },
        { value: '" \\n "', expect: true },
        { value: '" "', expect: true },
        { value: '"abc \x0Dz"', expect: false },
        { value: '"abc \nz"', expect: false },
        { value: '"abc \rz"', expect: false },
        { value: '"abc \x0Az"', expect: false },
        { value: '"abc \\z"', expect: false },
        { value: '" \\t \\b \\n \\r \\f \\\\ \\" \\\'  "', expect: true }
    ],
    // STRING_LITERAL_LONG1 ::= "'''" ( ( "'" | "''" )? ( [^'\] | ECHAR ) )* "'''"
    STRING_LITERAL_LONG1: [
        { value: 'a', expect: false },
        { value: "'''''", expect: false },
        { value: "'''''''", expect: false },
        { value: "''''''", expect: true },
        { value: "''' '''", expect: true },
        { value: "'''' '''", expect: true },
        { value: "'''abc \n \\''''", expect: true },
        { value: "'''abc \\ '''", expect: false },
        { value: "'''abc \\n \"def'''", expect: true }
    ],
    // STRING_LITERAL_LONG2 ::= '"""' ( ( '"' | '""' )? ( [^"\] | ECHAR ) )* '"""'
    STRING_LITERAL_LONG2: [
        { value: 'a', expect: false },
        { value: '""""', expect: false },
        { value: '"""""', expect: false },
        { value: '""""""', expect: true },
        { value: '""" """', expect: true },
        { value: '"""""""', expect: false },
        { value: '""""" """', expect: true },
        { value: '"""abc \n \\""""', expect: true },
        { value: '"""abc \\ """', expect: false },
        { value: '"""abc \\n \"def"""', expect: true }
    ],
    // ECHAR ::= '\' [tbnrf\"']
    ECHAR: [
        { value: '\\_', expect: false },
        { value: '\\t', expect: true },
        { value: '\\b', expect: true },
        { value: '\\n', expect: true },
        { value: '\\r', expect: true },
        { value: '\\f', expect: true },
        { value: '\\\\', expect: true },
        { value: '\\"', expect: true },
        { value: '\\\'', expect: true }
    ],
    // NIL ::= '(' WS* ')'
    NIL: [
        { value: '(_)', expect: false },
        { value: '( )', expect: true },
        { value: '(\t)', expect: true },
        { value: '(\r\t )', expect: true },
        { value: '(   \n)', expect: true },
        { value: '(   a)', expect: false },
        { value: 'x', expect: false }
    ],
    // WS ::= #x20 | #x9 | #xD | #xA
    WS: [
        { value: '_', expect: false },
        { value: ' ', expect: true },
        { value: '\t', expect: true },
        { value: '\r', expect: true },
        { value: '\n', expect: true },
        { value: '\b', expect: false },
        { value: 'x', expect: false }
    ],
    // ANON ::= '[' WS* ']'
    ANON: [
        { value: '[_]', expect: false },
        { value: '[ ]', expect: true },
        { value: '[\t]', expect: true },
        { value: '[\r\t ]', expect: true },
        { value: '[   \n]', expect: true },
        { value: '[   a]', expect: false },
        { value: 'x', expect: false }
    ],
    // PN_CHARS_BASE ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
    PN_CHARS_BASE: [
        { value: '_', expect: false },
        { value: 'A', expect: true },
        { value: 'a', expect: true },
        { value: 'E', expect: true },
        { value: 'Z', expect: true },
        { value: 'z', expect: true },
        { value: 'À', expect: true },
        { value: 'Ø', expect: true },
        { value: 'Ö', expect: true },
        { value: '\u00D7', expect: false },
        { value: 'ö', expect: true },
        { value: '\u02FF', expect: true },
        { value: 'Ͱ', expect: true },
        { value: 'Ϳ', expect: true },
        { value: '\u200C', expect: true },
        { value: '\u2FEF', expect: true },
        { value: '\uD7FF', expect: true },
        { value: '\uD800', expect: false },
        { value: '\uF902', expect: true },
        { value: '\uFDF1', expect: true },
        { value: '\uFFFE', expect: false }
    ],
    // PN_CHARS_U ::= PN_CHARS_BASE | '_'
    PN_CHARS_U: [
        { value: '_', expect: true },
        { value: 'A', expect: true },
        { value: 'a', expect: true },
        { value: 'E', expect: true },
        { value: 'Z', expect: true },
        { value: '\u00D7', expect: false },
        { value: 'ö', expect: true },
        { value: '\u02FF', expect: true },
        { value: '\uF902', expect: true },
        { value: '\uFDF1', expect: true },
        { value: '\uFFFE', expect: false }
    ],
    // VARNAME ::= ( PN_CHARS_U | [0-9] ) ( PN_CHARS_U | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040] )*
    VARNAME: [
        { value: '0', expect: true },
        { value: 'A\u00B7a', expect: true },
        { value: '\u00B7ii', expect: false },
        { value: '_x\u0301', expect: true }
    ],
    // PN_CHARS ::= PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
    PN_CHARS: [
        { value: '0', expect: true },
        { value: '-', expect: true },
        { value: 'aa', expect: false },
        { value: '\u0300', expect: true },
        { value: '\u0301', expect: true },
        { value: '\u036F', expect: true },
        { value: '\u0370', expect: true }, // n.b. part of PN_CHARS_BASE
        { value: '\u00B7', expect: true },
        { value: '\u203E', expect: false },
        { value: '\u203F', expect: true },
        { value: '\u2040', expect: true },
        { value: '\u2041', expect: false }
    ],
    // PN_PREFIX ::= PN_CHARS_BASE ((PN_CHARS|'.')* PN_CHARS)?
    PN_PREFIX: [
        { value: '0', expect: false },
        { value: '-', expect: false },
        { value: 'a', expect: true },
        { value: 'abcs', expect: true },
        { value: 'a.', expect: false },
        { value: 'a.a', expect: true },
        { value: 'x....a', expect: true },
        { value: 'x....a0-', expect: true },
        { value: 'x9', expect: true }
    ],
    // PN_LOCAL ::= (PN_CHARS_U | ':' | [0-9] | PLX ) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX) )?
    PN_LOCAL: [
        { value: '_', expect: true },
        { value: ':', expect: true },
        { value: '_.', expect: false },
        { value: '::', expect: true },
        { value: '0', expect: true },
        { value: '0.:', expect: true },
        { value: 'x.%00', expect: true }
    ],
    // PLX ::= PERCENT | PN_LOCAL_ESC
    PLX: [
        { value: '%a', expect: false },
        { value: '%é', expect: false },
        { value: '%00', expect: true },
        { value: '%01', expect: true },
        { value: '%0F', expect: true },
        { value: '%aa', expect: true },
        { value: '%b6', expect: true },
        { value: '%c9', expect: true },
        { value: '%FF', expect: true },
        { value: ' %FF', expect: false },
        { value: '%Fg', expect: false },
        { value: '\\\\', expect: false },
        { value: '\\a', expect: false },
        { value: '\\_', expect: true },
        { value: '\\=', expect: true },
        { value: '\\/', expect: true },
        { value: '\\?', expect: true },
        { value: '\\#', expect: true },
        { value: '\\@', expect: true },
        { value: '\\%', expect: true }
    ],
    // PERCENT ::= '%' HEX HEX
    PERCENT: [
        { value: '%a', expect: false },
        { value: '%é', expect: false },
        { value: '%00', expect: true },
        { value: '%01', expect: true },
        { value: '%02', expect: true },
        { value: '%03', expect: true },
        { value: '%04', expect: true },
        { value: '%05', expect: true },
        { value: '%06', expect: true },
        { value: '%07', expect: true },
        { value: '%08', expect: true },
        { value: '%09', expect: true },
        { value: '%0A', expect: true },
        { value: '%0B', expect: true },
        { value: '%0C', expect: true },
        { value: '%0D', expect: true },
        { value: '%0E', expect: true },
        { value: '%0F', expect: true },
        { value: '%aa', expect: true },
        { value: '%b6', expect: true },
        { value: '%c9', expect: true },
        { value: '%FF', expect: true },
        { value: '%Fg', expect: false }
    ],
    // HEX ::= [0-9] | [A-F] | [a-f]
    HEX: [
        { value: 'é', expect: false },
        { value: '0', expect: true },
        { value: '1', expect: true },
        { value: '2', expect: true },
        { value: '3', expect: true },
        { value: '4', expect: true },
        { value: '5', expect: true },
        { value: '6', expect: true },
        { value: '7', expect: true },
        { value: '8', expect: true },
        { value: '9', expect: true },
        { value: 'A', expect: true },
        { value: 'B', expect: true },
        { value: 'C', expect: true },
        { value: 'D', expect: true },
        { value: 'E', expect: true },
        { value: 'F', expect: true },
        { value: 'a', expect: true },
        { value: 'b', expect: true },
        { value: 'c', expect: true },
        { value: 'd', expect: true },
        { value: 'e', expect: true },
        { value: 'f', expect: true }
    ],
    // PN_LOCAL_ESC ::= '\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )
    PN_LOCAL_ESC: [
        { value: '\\\\', expect: false },
        { value: '\\a', expect: false },
        { value: '\\_', expect: true },
        { value: '\\~', expect: true },
        { value: '\\.', expect: true },
        { value: '\\-', expect: true },
        { value: '\\!', expect: true },
        { value: '\\$', expect: true },
        { value: '\\&', expect: true },
        { value: '\\\'', expect: true },
        { value: '\\(', expect: true },
        { value: '\\)', expect: true },
        { value: '\\*', expect: true },
        { value: '\\+', expect: true },
        { value: '\\,', expect: true },
        { value: '\\;', expect: true },
        { value: '\\=', expect: true },
        { value: '\\/', expect: true },
        { value: '\\?', expect: true },
        { value: '\\#', expect: true },
        { value: '\\@', expect: true },
        { value: '\\%', expect: true }
    ]
}

Object.keys(testData).forEach((rule) => {
    describe(`Grammar rule ${rule} matches`, () => {
        testData[rule].forEach((match) => {
            test(`${match.value}: ${match.expect}`, () => {
                expect(grammar.check(match.value, rule)).toBe(match.expect);
            });
        });
    });
});